<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shining Star</title>
  
  <subtitle>To meet a better self!!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://hongqx.github.io/"/>
  <updated>2018-10-03T05:04:58.000Z</updated>
  <id>http://hongqx.github.io/</id>
  
  <author>
    <name>Shining Star</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hls-tag-summarize</title>
    <link href="http://hongqx.github.io/fe/hls-tag-summarize/"/>
    <id>http://hongqx.github.io/fe/hls-tag-summarize/</id>
    <published>2018-10-02T03:36:14.000Z</published>
    <updated>2018-10-03T05:04:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>自己接触hls很久了，自从开始接触h5播放器，就开始接触hls、m3u8这些关键词，对这些概念和使用方式都能详细说出，感觉了解还挺多，但是上周遇到一个公司的视频在ios系统的UC浏览器上总是只播放广告之后，中断了，无法继续播放的问题，排查结果是UC自己的播放器遇到EXT-X-TARGETDURATION自动结束播放，而公司内的针对广告和正片的playlist合并，每个广告内容结束都会有EXT-X-TARGETDURATION，于是UC的开发和我开始了关于这个标签的撕逼，为了不给打脸，看来得对hls的各种tag有个总结了<br><img src="./source/assets/emoji/wulian.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自己接触hls很久了，自从开始接触h5播放器，就开始接触hls、m3u8这些关键词，对这些概念和使用方式都能详细说出，感觉了解还挺多，但是上周遇到一个公司的视频在ios系统的UC浏览器上总是只播放广告之后，中断了，无法继续播放的问题，排查结果是UC自己的播放器遇到EXT-X
      
    
    </summary>
    
      <category term="fe" scheme="http://hongqx.github.io/categories/fe/"/>
    
    
      <category term="hls" scheme="http://hongqx.github.io/tags/hls/"/>
    
      <category term="h5player" scheme="http://hongqx.github.io/tags/h5player/"/>
    
      <category term="m3u8" scheme="http://hongqx.github.io/tags/m3u8/"/>
    
  </entry>
  
  <entry>
    <title>关于hexo的一些常用命令汇总</title>
    <link href="http://hongqx.github.io/fe/hexo-command/"/>
    <id>http://hongqx.github.io/fe/hexo-command/</id>
    <published>2018-08-31T07:12:33.000Z</published>
    <updated>2018-10-03T04:55:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近使用hexo构建博客，将一些常用命令，以及自己使用的主题及主题配置本分说明下，<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">全面的hexo文档</a></p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g hexo</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cd ./Workspaces/hexo/</span><br><span class="line"><span class="meta">$</span> hexo init</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo g # 生成静态文件 等同于hexo generate </span><br><span class="line"><span class="meta">$</span> hexo s # 启动服务 等同于hexo server</span><br><span class="line"><span class="meta">$</span> hexo d #完整命令为hexo deploy,将本地编译好的静态文件发布到github上</span><br><span class="line"><span class="meta">$</span> hexo n #完整命令为hexo new,新建一篇文章</span><br><span class="line"><span class="meta">$</span> hexo clean #清除当前项目的静态文件</span><br></pre></td></tr></table></figure><h3 id="端口和配置"><a href="#端口和配置" class="headerlink" title="端口和配置"></a>端口和配置</h3><p>hexo启动的时候默认端口号为4000，想要更改启动的端口号如下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo s -p 5000</span><br></pre></td></tr></table></figure></p><p>如果不想每次都更改这个文件这么麻烦的话，可以在hexo的配置文件_config.yml中修改或增加这段代码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Server</span><br><span class="line">server:</span><br><span class="line">  port: 4000</span><br><span class="line">  compress: true</span><br><span class="line">  header: true</span><br></pre></td></tr></table></figure></p><h2 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h2><h3 id="拷贝主题"><a href="#拷贝主题" class="headerlink" title="拷贝主题"></a>拷贝主题</h3><p>我使用的主题是yilia这个主题, <a href="https://github.com/litten/hexo-theme-yilia.git" target="_blank" rel="noopener">hexo-theme-yilia主题github地址</a>,使用方法将改主题clone到themes之下<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/litten/hexo-theme-yilia.git themes/yilia</span><br><span class="line"><span class="meta">#</span> 拷贝完成切换到主题目录下</span><br><span class="line"><span class="meta">$</span> cd themes </span><br><span class="line"><span class="meta">#</span> 能直接查看theme中多了一个yilia的目录，就是主题配置目录</span><br><span class="line"><span class="meta">$</span> ls -l</span><br></pre></td></tr></table></figure></p><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>回到项目的主目录，会看到有_config.yml这样一个文件，打开该文件，将配置中的theme修改为你先使用的主题名称<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> Extensions</span><br><span class="line"><span class="meta">#</span># Plugins: https://hexo.io/plugins/</span><br><span class="line"><span class="meta">#</span># Themes: https://hexo.io/themes/</span><br><span class="line">theme: yilia</span><br></pre></td></tr></table></figure></p><p>然后重新编译静态文件 启动服务,就能通过<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>, 在浏览器中看到自己的博客了<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo clean</span><br><span class="line"><span class="meta">$</span> hexo g</span><br><span class="line"><span class="meta">$</span> hexo s</span><br></pre></td></tr></table></figure></p><h3 id="主题自定义配置"><a href="#主题自定义配置" class="headerlink" title="主题自定义配置"></a>主题自定义配置</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.article-entry</span> <span class="selector-class">.highlight</span>, <span class="selector-class">.article-entry</span> <span class="selector-tag">pre</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, #192224 0%, #21728b 100%);</span><br><span class="line">  <span class="attribute">font-family</span>: Menlo,Monaco,Consolas,<span class="string">"Courier New"</span>,monospace;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#a9b7c6</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">pre</span> <span class="selector-class">.class</span> <span class="selector-class">.params</span>, <span class="selector-tag">pre</span> <span class="selector-class">.function</span> <span class="selector-class">.keyword</span>, <span class="selector-tag">pre</span> <span class="selector-class">.keyword</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#e8bf6a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">pre</span> <span class="selector-class">.string</span>, <span class="selector-tag">pre</span> <span class="selector-class">.value</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#6a8759</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">pre</span> <span class="selector-class">.comment</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#a9b7c6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">function</span> <span class="selector-tag">name</span> : <span class="selector-id">#268bd2</span></span><br><span class="line"><span class="selector-tag">number</span> <span class="selector-id">#6897bb</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> <span class="selector-id">#d7ecff</span></span><br><span class="line"><span class="selector-tag">bg-pattern</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../img/bg-pattern.png) repeat;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近使用hexo构建博客，将一些常用命令，以及自己使用的主题及主题配置本分说明下，&lt;a href=&quot;https://hexo.io/zh-cn/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;全面的hexo文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="fe" scheme="http://hongqx.github.io/categories/fe/"/>
    
    
      <category term="hexo" scheme="http://hongqx.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>webpack动态加载</title>
    <link href="http://hongqx.github.io/fe/webpack-dynamic-loading/"/>
    <id>http://hongqx.github.io/fe/webpack-dynamic-loading/</id>
    <published>2018-08-20T11:30:28.000Z</published>
    <updated>2018-10-03T04:08:48.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="fe" scheme="http://hongqx.github.io/categories/fe/"/>
    
    
      <category term="webpack" scheme="http://hongqx.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Nginx详细安装部署教程</title>
    <link href="http://hongqx.github.io/fe/nginx-install/"/>
    <id>http://hongqx.github.io/fe/nginx-install/</id>
    <published>2018-07-31T07:49:48.000Z</published>
    <updated>2018-10-02T09:36:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="https://www.cnblogs.com/taiyonghai/p/6728707.html" target="_blank" rel="noopener">Nginx详细安装部署教程</a><br><a id="more"></a></p><h3 id="安装遇到的问题"><a href="#安装遇到的问题" class="headerlink" title="安装遇到的问题"></a>安装遇到的问题</h3><h4 id="重启防火墙的时候遇到了如下问题"><a href="#重启防火墙的时候遇到了如下问题" class="headerlink" title="重启防火墙的时候遇到了如下问题"></a>重启防火墙的时候遇到了如下问题</h4><p>输入如下命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//重启防火墙</span><br><span class="line">service iptables restart</span><br></pre></td></tr></table></figure></p><p>输入以上命令的时候，出现了如下报错<strong><em>Failed to restart iptables.service: Unit not found</em></strong>,后来排查了之后找到原因貌似是因为在<strong><em>CentOS 7或RHEL 7或Fedora中防火墙由firewalld来管理</em></strong>,想要采用<code>service iptables restart</code>需要执行如下命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl mask firewalld</span><br><span class="line"></span><br><span class="line">//安装iptables-services：</span><br><span class="line">yum install iptables-services</span><br><span class="line"></span><br><span class="line">//设置开机启动</span><br><span class="line">systemctl enable iptables</span><br></pre></td></tr></table></figure></p><p>后续运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart iptables</span><br><span class="line"></span><br><span class="line">//命令有stop|start|restart</span><br><span class="line">//or</span><br><span class="line">//service iptables restart</span><br><span class="line">//命令有stop|start|restart</span><br></pre></td></tr></table></figure></p><p>在进行了以上步骤之后，又出现了新的问题提示<code>Redirecting to /bin/systemctl restart iptables.serviceJob for iptables.service failed because the control process exited with error code.See &quot;systemctl status iptables.service&quot; and &quot;journalctl -xe&quot; for details</code>,解决方案如下：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//重新运行网络管理装置</span><br><span class="line"></span><br><span class="line">chkconfig network off</span><br><span class="line"></span><br><span class="line">chkconfig network on</span><br><span class="line"></span><br><span class="line">service NetworkManager stop</span><br><span class="line"></span><br><span class="line">service NetworkManager start</span><br></pre></td></tr></table></figure></p><p>这回终于重启成功，在host中配置了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">47.104.185.99 nginx.test.com</span><br></pre></td></tr></table></figure><p>ping了一下nginx.test.com，链接成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping nginx.test.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转载自：&lt;a href=&quot;https://www.cnblogs.com/taiyonghai/p/6728707.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Nginx详细安装部署教程&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="fe" scheme="http://hongqx.github.io/categories/fe/"/>
    
    
      <category term="nginx" scheme="http://hongqx.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>web端video自动播放策略</title>
    <link href="http://hongqx.github.io/fe/chrome-video-auto-play/"/>
    <id>http://hongqx.github.io/fe/chrome-video-auto-play/</id>
    <published>2018-07-31T01:12:42.000Z</published>
    <updated>2018-10-03T03:52:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近看 来自 Chrome 团队在 IO 2018上的 分享 <a href="https://www.youtube.com/watch?v=5azRhKsSU_M" target="_blank" rel="noopener">《Build awesome media experiences on the web》</a> 。大概主要是说关于 音视频在 Chrome 上的更新。其中业务团队需要及时关注新的 自动播放策略，虽然在去年9月份 Chrome 团队就更新了博客 <a href="https://developers.google.com/web/updates/2017/09/autoplay-policy-changes" target="_blank" rel="noopener">《Autoplay Policy Changes》</a>。 Chrome 会在 2018年 的第二个季度，采取新的自动播放策略。</p><p>目前该策略在很多场景已经存在，用户初始进入到视频页面的时候，会阻止默认自动播放，如果用户在当前域名下选择了播放，在多次选择之后，就会默认可执行自动播放。目前该策略也对我们线上的一些场景产生了影响，参照之前对safari11以上版本webkit内核根据用户设置阻止视频自动播放的案例的处理，下面是针对chrome上无法自动播放的一些整理，以及在移动web端自动播放支持的情况总结。<br><a id="more"></a></p><h3 id="自动播放的策略调整"><a href="#自动播放的策略调整" class="headerlink" title="自动播放的策略调整"></a>自动播放的策略调整</h3><p><img src="http://img1.vued.vanthink.cn/vueda728bcacf470e6922f5ba6325af54c81.png" alt="Chrome Autoplay Policy"><br>如图中所示:</p><ul><li>页面中的视频处于静音状态下是允许自动播放的，大概这个产品交互可以参考 微博的主站策略</li><li>如果用户与当前页面有任何的交互比如点击或者 tap 这样的行为，视频的自动播放将会允许(Safari 最早采用这个策略)</li><li>在移动端如果页面是被添加到桌面上，自动播放是云讯的。</li><li>在桌面端我们会根据用户的 媒体参与指数Media Engagement Index, MEI，后文会详细说这个) 来决定这个视频是否自动播放。</li></ul><p>如何判断当前媒体是否允许自动播放可以参考下面代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="built_in">document</span>.querySelector(<span class="string">'video'</span>).play();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (promise !== <span class="literal">undefined</span>) &#123;  </span><br><span class="line">    promise.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Auto-play was prevented</span></span><br><span class="line">        <span class="comment">// Show a UI element to let the user manually start playback</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// Auto-play started</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="iframe-下自动播放的调整"><a href="#iframe-下自动播放的调整" class="headerlink" title="iframe 下自动播放的调整"></a>iframe 下自动播放的调整</h3><p>Chrome 还强调了开发者可以通过 <strong>allow</strong> 属性来控制页面中通过 iframe 来控制引用页面内的媒体权限。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Autoplay is allowed. --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://cross-origin.com/myvideo.html"</span> <span class="attr">allow</span>=<span class="string">"autoplay"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Autoplay and Fullscreen are allowed. --&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://cross-origin.com/myvideo.html"</span> <span class="attr">allow</span>=<span class="string">"autoplay; fullscreen"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><em>如果是同一个域下的自动播放默认是允许的</em></p><h3 id="媒体参与指数-Media-Engagement-Index"><a href="#媒体参与指数-Media-Engagement-Index" class="headerlink" title="媒体参与指数 (Media Engagement Index)"></a>媒体参与指数 (Media Engagement Index)</h3><p>MEI 是一个评估用户对于当前站点的媒体参与程度的指数，它取决于下面几个维度:</p><p>用户在媒体上停留时间超过了 7秒以上<br>音频必须是展示出来，并且没有静音<br>与 video 之间有过交互<br>媒体的尺寸不小于 200x140.<br>你可以在 Chrome 的地址栏输入:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome:<span class="comment">//media-engagement</span></span><br></pre></td></tr></table></figure></p><p>如果你是作为开发者，你也可以手动调整这个策略:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chrome:<span class="comment">//flags/#autoplay-policy</span></span><br></pre></td></tr></table></figure></p><p>在地址栏输入以上的地址，可以进行手动的策略调整，进行测试。</p><h3 id="移动web如何实现自动播放的支持"><a href="#移动web如何实现自动播放的支持" class="headerlink" title="移动web如何实现自动播放的支持"></a>移动web如何实现自动播放的支持</h3><p>在chrome和safari调整期自动播放的策略之前，最最让人悲桑的就是移动端的自动播放过，很多第三方浏览器是直接不允许自动播放的，例如QQ浏览器、百度浏览器，当前还有万恶的UC浏览器，针对这些浏览器，宝宝只能很悲桑的说一声，要么你的公司能强制让这些大爷们给你做可自动播放配置，要么就去挑战提出要自动播放的产品吧放弃吧~~（ps：这个自动播放从用户角度来说确实也是合理的哈）</p><p>以上种种，在移动web端浏览器中实现自动播放希望渺茫，但是在自家app的webview中还是有一线希望的，前提是你要去找native开发哥哥帮你修改个webview的参数啦<br>android需要如下修改<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mWebview.getSettings().setMediaPlaybackRequiresUserGesture(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure></p><p>ios需要添加webview的属性设置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//media的播放必须要用户行为触发</span></span><br><span class="line">_webView.mediaPlaybackRequiresUserAction = NO;</span><br></pre></td></tr></table></figure></p><p>如果希望自动播放时不要全屏，那么嗨需要设置下面的属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//允许media在行间播放</span></span><br><span class="line">_webView.allowsInlineMediaPlayback = YES;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近看 来自 Chrome 团队在 IO 2018上的 分享 &lt;a href=&quot;https://www.youtube.com/watch?v=5azRhKsSU_M&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Build awesome media experiences on the web》&lt;/a&gt; 。大概主要是说关于 音视频在 Chrome 上的更新。其中业务团队需要及时关注新的 自动播放策略，虽然在去年9月份 Chrome 团队就更新了博客 &lt;a href=&quot;https://developers.google.com/web/updates/2017/09/autoplay-policy-changes&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Autoplay Policy Changes》&lt;/a&gt;。 Chrome 会在 2018年 的第二个季度，采取新的自动播放策略。&lt;/p&gt;
&lt;p&gt;目前该策略在很多场景已经存在，用户初始进入到视频页面的时候，会阻止默认自动播放，如果用户在当前域名下选择了播放，在多次选择之后，就会默认可执行自动播放。目前该策略也对我们线上的一些场景产生了影响，参照之前对safari11以上版本webkit内核根据用户设置阻止视频自动播放的案例的处理，下面是针对chrome上无法自动播放的一些整理，以及在移动web端自动播放支持的情况总结。&lt;br&gt;
    
    </summary>
    
      <category term="fe" scheme="http://hongqx.github.io/categories/fe/"/>
    
    
      <category term="videoElement" scheme="http://hongqx.github.io/tags/videoElement/"/>
    
      <category term="autoplay" scheme="http://hongqx.github.io/tags/autoplay/"/>
    
  </entry>
  
  <entry>
    <title>设计模式系列-单例模式</title>
    <link href="http://hongqx.github.io/design-pattern/design-patterns-singleton/"/>
    <id>http://hongqx.github.io/design-pattern/design-patterns-singleton/</id>
    <published>2018-07-31T01:09:41.000Z</published>
    <updated>2018-10-03T03:56:43.751Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="design-pattern" scheme="http://hongqx.github.io/categories/design-pattern/"/>
    
    
      <category term="design pattern" scheme="http://hongqx.github.io/tags/design-pattern/"/>
    
      <category term="单例" scheme="http://hongqx.github.io/tags/%E5%8D%95%E4%BE%8B/"/>
    
  </entry>
  
</feed>
